import React, { useState, useEffect } from "react";
import axios from "axios";
import "./App.css";

const BACKEND_URL = "https://stock-management-9v8g.onrender.com"; // Update if running locally

const App = () => {
    const [items, setItems] = useState([]);
    const [stock, setStock] = useState([]);
    const [itemName, setItemName] = useState("");
    const [quantity, setQuantity] = useState(0);
    const [bulkItems, setBulkItems] = useState("");
    const [operation, setOperation] = useState("bulk-add");
    const [orderCheckData, setOrderCheckData] = useState("");
    const [orderReport, setOrderReport] = useState([]);
    const [isProcessing, setIsProcessing] = useState(false);
    const [message, setMessage] = useState("");
    const [skippedItems, setSkippedItems] = useState([]);
    const [isSubmitting, setIsSubmitting] = useState(false);
    const [submissionMessage, setSubmissionMessage] = useState("");
    const [isOrderSubmitted, setIsOrderSubmitted] = useState(false);

    useEffect(() => {
        fetchStock();
        fetchItems();
    }, []);

    const fetchStock = async () => {
        const response = await axios.get(`${BACKEND_URL}/stock`);
        setStock(response.data);
    };

    const fetchItems = async () => {
        const response = await axios.get(`${BACKEND_URL}/items`);
        setItems(response.data);
    };

    const handleStockOperation = async (type) => {
        await axios.post(`${BACKEND_URL}/stock/${type}`, { itemName, quantity: Number(quantity) });
        fetchStock();
    };

    const handleOrderCheck = async () => {
        const orders = orderCheckData.split("\n").map(line => {
            const [name, qty] = line.split(",");
            return { itemName: name.trim(), quantity: Number(qty.trim()) };
        });

        try {
            const response = await axios.post(`${BACKEND_URL}/stock/order-check`, { items: orders });
            setOrderReport(response.data);
            setIsOrderSubmitted(false);
        } catch (error) {
            console.error("Error fetching order check report:", error);
        }
    };

    const handleSubmitOrder = async () => {
        if (orderReport.length === 0) {
            setSubmissionMessage("No valid orders to submit");
            return;
        }

        setIsSubmitting(true);
        setSubmissionMessage("Submitting order...");

        const validOrders = orderReport.filter(item => item.balance >= 0).map(item => ({
            itemName: item.itemName,
            quantity: item.requested
        }));

        if (validOrders.length === 0) {
            setSubmissionMessage("All requested items have insufficient stock.");
            setIsSubmitting(false);
            return;
        }

        try {
            await axios.post(`${BACKEND_URL}/stock/submit-order`, { items: validOrders });
            setSubmissionMessage("Order submitted successfully");
            setIsOrderSubmitted(true);
            fetchStock();
        } catch (error) {
            setSubmissionMessage("Error submitting order");
        }

        setIsSubmitting(false);
    };

    return (
        <div className="container">
            <h1>Stock Management</h1>
            
            <div className="card">
                <h2>Manage Stock</h2>
                <input 
                    type="text" 
                    list="items-list" 
                    placeholder="Select or Type Item" 
                    value={itemName} 
                    onChange={(e) => setItemName(e.target.value)} 
                />
                <datalist id="items-list">
                    {items.map(item => <option key={item} value={item} />)}
                </datalist>
                <input 
                    type="number" 
                    placeholder="Quantity" 
                    value={quantity} 
                    onChange={(e) => setQuantity(e.target.value)} 
                />
                <div className="button-group">
                    <button onClick={() => handleStockOperation("add")}>Add Stock</button>
                    <button className="red-button" onClick={() => handleStockOperation("remove")}>Remove Stock</button>
                </div>
            </div>
            
            <div className="card">
                <h2>Order Check</h2>
                <textarea 
                    placeholder="Enter orders in format: Name, Quantity" 
                    value={orderCheckData} 
                    onChange={(e) => setOrderCheckData(e.target.value)} 
                />
                <button onClick={handleOrderCheck}>Check Order</button>

                {orderReport.length > 0 && (
                    <>
                        <table>
                            <thead>
                                <tr>
                                    <th>Item Name</th>
                                    <th>Requested</th>
                                    <th>Available</th>
                                    <th>Balance</th>
                                </tr>
                            </thead>
                            <tbody>
                                {orderReport.map((report, index) => (
                                    <tr key={index}>
                                        <td>{report.itemName}</td>
                                        <td>{report.requested}</td>
                                        <td>{report.available}</td>
                                        <td className={report.balance < 0 ? "negative-balance" : ""}>{report.balance}</td>
                                    </tr>
                                ))}
                            </tbody>
                        </table>
                        {!isOrderSubmitted && (
                            <button 
                                className="submit-button" 
                                onClick={handleSubmitOrder} 
                                disabled={isSubmitting}
                            >
                                {isSubmitting ? "Submitting order..." : "Submit Order"}
                            </button>
                        )}
                        {submissionMessage && <p className="submission-message">{submissionMessage}</p>}
                    </>
                )}
            </div>

            <div className="card">
                <h2>Stock Overview</h2>
                <table>
                    <thead>
                        <tr>
                            <th>Item Name</th>
                            <th>Quantity</th>
                        </tr>
                    </thead>
                    <tbody>
                        {stock.map(item => (
                            <tr key={item.itemName}>
                                <td>{item.itemName}</td>
                                <td>{item.quantity}</td>
                            </tr>
                        ))}
                    </tbody>
                </table>
            </div>
        </div>
    );
};

export default App;
